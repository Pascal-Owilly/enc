"""
Django settings for enceptics project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import datetime
from decouple import config, Csv

import logging


# BASE_DIR = Path(__file__).resolve().parent.parent
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'logfile.log'),
            'formatter': 'default',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },
    },
    'root': {
        'handlers': ['file', 'console'],
        'level': 'INFO',  # Adjust the root log level as needed (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    },
    'loggers': {
        'payment_log.log': {
            'handlers': ['file'],
            'level': 'INFO',  # Adjust the log level for the 'myapp.payment' logger
        },
        'myapp.other_component': {
            'handlers': ['file'],
            'level': 'DEBUG',  # Adjust the log level for the 'myapp.other_component' logger
        },
    },
}


# specify log file



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7tgcv33&!i&av(!mc1$zlwa#@db5jb!-ir0lb%*=3$63tkc8)s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Paypal settings
PAYPAL_SANDBOX_CLIENT_ID = config('PAYPAL_SANDBOX_CLIENT_ID')
PAYPAL_SANDBOX_CLIENT_SECRET = config('PAYPAL_SANDBOX_CLIENT_SECRET')
AMBEE_WEATHER_API_KEY = config('AMBEE_WEATHER_API_KEY')
API_NINJAS_API_KEY = config('API_NINJAS_API_KEY')
OPENWEATHERMAP_API_KEY = config('OPENWEATHERMAP_API_KEY')


# MPESA CREDENTIALS
consumer_key=config('consumer_key')
consumer_secret=config('consumer_secret')
shortcode=config('shortcode')
pass_key=config('pass_key')
access_token_url=config('access_token_url')
checkout_url=config('checkout_url')

MPESA_ENVIRONMENT = 'sandbox'
MPESA_CONSUMER_KEY = config('consumer_key')
MPESA_CONSUMER_SECRET = config('consumer_secret')
MPESA_EXPRESS_SHORTCODE = config('shortcode')
MPESA_SHORTCODE_TYPE = 'paybill'
MPESA_PASSKEY = config('mpesa_pass_key')
MPESA_INITIATOR_USERNAME = config('initator_user_name')
MPESA_INITIATOR_SECURITY_CREDENTIAL = 'Safaricom999!*!'



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_yasg',

    # local

    "authentication.apps.AuthenticationConfig",
    'blog_posts.apps.BlogPostsConfig',
    'accounts.apps.AccountsConfig',
    'destinations.apps.DestinationsConfig',
    'weather.apps.WeatherConfig',
    'mpesa_payment.apps.MpesaPaymentConfig',

    # 3rd party

    "rest_framework",
    "rest_framework.authtoken",
    "allauth",
    "allauth.account",
    "allauth.socialaccount", 
    "dj_rest_auth",
    "dj_rest_auth.registration",
    'rest_framework_swagger',
    'corsheaders',
    'django_daraja',
]

CORS_ORIGIN_ALLOW_ALL = True

CORS_ORIGIN_WHITELIST = [
    'http://localhost:3000',  
    'https://127.0.0.1:3000', 
    'https://127.0.0.1',  
    'http://localhost:5173',
    # 'vercel.app',
]
    
SWAGGER_SETTINGS = {
    'LOGIN_URL': 'rest_framework:login',
    'LOGOUT_URL': 'rest_framework:logout',
}

SIGNALS_MODULE = 'authentication.signals'   
AUTH_TOKEN_MODEL = 'authentication..CustomToken'
AUTH_USER_MODEL = 'auth.User'
ROOT_URLCONF = 'enceptics.urls'
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

DATE_INPUT_FORMATS = ['%m/%d/%y %H:%M:%S',]
USE_L10N = False

'''
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "<your email host>"                    # smtp-relay.sendinblue.com
EMAIL_USE_TLS = False                               # False
EMAIL_PORT = "<your email port>"                    # 587
EMAIL_HOST_USER = "<your email user>"               # your email address
EMAIL_HOST_PASSWORD = "<your email password>"       # your password
DEFAULT_FROM_EMAIL = "<your default from email>"    # email ending with @sendinblue.com

'''

ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"

# ACCOUNT_AUTHENTICATION_METHOD = 'username'
# ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
# ACCOUNT_LOGIN_SERIALIZER = 'enceptics.serializers.CustomLoginSerializer'


# <EMAIL_CONFIRM_REDIRECT_BASE_URL>/<key>
EMAIL_CONFIRM_REDIRECT_BASE_URL = \
    "http://localhost:3000/email/confirm/"

# <PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL>/<uidb64>/<token>/
PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL = \
    "http://localhost:3000/password-reset/confirm/" 


SITE_ID = 1


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Session engine and other session-related settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Use the database as the session storage backend
SESSION_COOKIE_NAME = 'blog_post_session'  # Set a custom session cookie name
SESSION_COOKIE_AGE = 1209600  # Set the session cookie's age (2 weeks in seconds)

SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True


ROOT_URLCONF = 'enceptics.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'enceptics.wsgi.application'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",  
            ]
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
}


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'enceptics',
        'USER': 'pascal',
        'PASSWORD': 'test',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

AUTHENTICATION_BACKENDS = (
    # ...
    'allauth.account.auth_backends.AuthenticationBackend',
    # ...
)

ACCOUNT_EMAIL_VERIFICATION = 'none'  # Disable email verification for simplicity


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'        

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = os.path.join(BASE_DIR, 'static'),
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build', 'static')

MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Directory where uploaded media is saved.
MEDIA_URL = '/media/' # Public URL at the browser

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AUTH_USER_MODEL = 'accounts.CustomUser'  

# # # Custom user credentials
# ACCOUNT_SIGNUP_FORM_CLASS = 'accounts.forms.CustomSignupForm'
# ACCOUNT_SIGNUP_VIEW = 'accounts.views.CustomSignupView'

